<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	
	<modelVersion>4.0.0</modelVersion>
	<artifactId>lib</artifactId>
	<packaging>jar</packaging>
	
	<parent>
		<groupId>com.quantium.mobile.framework</groupId>
		<artifactId>frameworkMobile</artifactId>
		<version>0.37-SNAPSHOT</version>
	</parent>
	
	<name>lib</name>

	<properties>
		<json.version>20090211</json.version>
		<httpcomponents.version>4.0.1</httpcomponents.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.3</version>
			<scope>test</scope>
		</dependency>
		<!--
		  Note abaixo que as bibliotecas "httpclient", "httpcore" e
		  "json" estao com escopo provided.
		  Para os testes eu incluo a lib do android, que inclui
		  as anteriores.
		  Adicionalmente, foi necessario adicionar a lib "json" ao
		  jetty, como dependencia runtime.
		-->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${httpcomponents.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>${httpcomponents.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>${json.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.android</groupId>
			<artifactId>android</artifactId>
			<version>${platform.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>8.1.8.v20121106</version>
				<!-- Configuracoes para todas as execucoes do jetty -->
				<configuration>
					<!-- valores arbitrarios em stopPort e stopKey -->
					<stopPort>10999</stopPort>
					<stopKey>stop-jt</stopKey>
					<!-- Hot deploy a cada 10 segundos -->
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<!-- Pasta root de "src/main/webapp" para "src/test/webapp" -->
					<webAppSourceDirectory>${basedir}/src/test/webapp</webAppSourceDirectory>
					<!-- Para usar as classes de "src/test/java" no webapp -->
					<useTestScope>true</useTestScope>
					<!-- Para logar a URL das requisicoes -->
					<requestLog implementation="org.eclipse.jetty.server.NCSARequestLog" />
					<!-- Webapp acessivel em "127.0.0.1:9091/" -->
					<!-- Note tambem o contextPath apontando para ROOT (/) -->
					<!-- Deve ser compativel com a URL em "JsonCommunicationIT.URL" -->
					<contextPath>/</contextPath>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<port>9091</port>
						</connector>
					</connectors>
				</configuration>
				<dependencies>
					<!--
					  Foi necessario adicionar a lib "json"
					  ao container (jetty).
					  Esta dependencia nao deve propagar
					  para os projetos que usam esta lib.
					-->
					<dependency>
						<groupId>org.json</groupId>
						<artifactId>json</artifactId>
						<version>${json.version}</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>start-jetty</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<!-- Estas configuracoes so executam em pre-integration test -->
						<!-- nao em "mvn jetty:run", por exemplo -->
						<configuration>
							<!-- Opcao daemon para forcar jetty a rodar enquanto -->
							<!-- o Maven roda sem parar a execucao dos testes. -->
							<!-- http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin#jetty:start__:__Starting_jetty_without_first_executing_the_build_up_to_.22test-compile.22_phase -->
							<daemon>true</daemon>
						</configuration>
					</execution>
					<!-- Para parar o jetty que esta rodando como daemon -->
					<execution>
						<id>stop-jetty</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.11</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>2.12</version>
					</dependency>
				</dependencies>
				<configuration>
					<!-- Arquivos para executar testes unitarios JUnit -->
					<!-- De prefenrencia, nao devem incluir os testes de integracao -->
					<includes>
						<include>**/*Test.java</include>
					</includes>
				</configuration>
				<executions>
					<!-- Execucao de testes de integracao -->
					<execution>
						<id>integration-tests</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<!-- Arquivos para executar testes de integracao JUnit -->
							<!-- Estes serao executados em paralelo ao jetty -->
							<includes>
								<include>**/*IT.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<distributionManagement>
		<repository>
			<id>nexus</id>
			<name>Releases</name>
			<url>${url.releases}</url>
		</repository>
		<snapshotRepository>
			<id>nexus</id>
			<name>Snapshots</name>
			<url>${url.snapshots}</url>
		</snapshotRepository>
	</distributionManagement>
	 
	<profiles>
		<profile>
			<id>emma</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<dependencies>
				<dependency>
					<groupId>emma</groupId>
					<artifactId>emma</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>emma-maven-plugin</artifactId>
						<executions>
							<execution>
								<!-- 
								     O plugin do Jetty recompila o projeto antes de sua execucao,
								     invocando "process-classes" duas vezes.
								     Alterei a execucao para "process-test-classes", que roda uma vez.
								-->
								<phase>process-test-classes</phase>
								<goals>
									<goal>instrument</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<!--
							     As classes udadas pelo gerador devem ser filtradas,
							     para evitar um "crash" do gerador.
							-->
							<filters>
								<filter>+com.quantium.mobile.framework.LazyInvocationHandler</filter>
								<filter>+com.quantium.mobile.framework.MapToObjectIterator</filter>
								<filter>+com.quantium.mobile.framework.StreamJsonIterator</filter>
								<filter>+com.quantium.mobile.framework.communication.*</filter>
								<filter>+com.quantium.mobile.framework.db.*</filter>
								<filter>+com.quantium.mobile.framework.query.*</filter>
								<!-- filter>+com.quantium.mobile.framework.validation.*</filter -->
								<!--
								   As classes Table e Table.Column e Constraint sao dependencias
								   do gerador e devem ser excluidas para evitar o "crash" do plugin
								-->
								<filter>-com.quantium.mobile.framework.query.Table*</filter>
								<filter>-com.quantium.mobile.framework.validation.Constraint</filter>
								<filter>-com.quantium.mobile.framework.validation.ValidationError</filter>
								<!--
								  O FrameworkJSONTokener foi copiado do fonte do "JSON.org"
								  nao sera coberto pelo EMMA
								-->
								<filter>-com.quantium.mobile.framework.FrameworkJSONTokener</filter>
							</filters>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
